#ifndef KM_IOCTRL_H
#define KM_IOCTRL_H

#include <km_core.h>

///////////////////////////////////////////////////////////
// I/O control codes
///////////////////////////////////////////////////////////

#define IOCTRL_UPDATE_PROCESS_IMAGES CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0100, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_UPDATE_KERNEL_IMAGES  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0101, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTRL_READ_PROCESS_IMAGES   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0200, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_READ_KERNEL_IMAGES    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0201, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_READ_PROCESS_MEMORY   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0202, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_READ_KERNEL_MEMORY    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0203, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_READ_SCAN_RESULTS     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0204, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTRL_WRITE_PROCESS_MEMORY  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0300, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_WRITE_KERNEL_MEMORY   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0301, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTRL_SCAN_PROCESS_FIRST    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0400, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define IOCTRL_SCAN_PROCESS_NEXT     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0401, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

///////////////////////////////////////////////////////////
// I/O request data types
///////////////////////////////////////////////////////////

typedef enum _SCAN_TYPE
{
  SCAN_TYPE_BYTE8,
  SCAN_TYPE_BYTE16,
  SCAN_TYPE_BYTE32,
  SCAN_TYPE_BYTE64,
} SCAN_TYPE, * PSCAN_TYPE;

typedef struct _READ_PROCESS_MEMORY
{
  DWORD32 Pid;
  DWORD64 Base;
  DWORD32 Size;
} READ_PROCESS_MEMORY, * PREAD_PROCESS_MEMORY;
typedef struct _READ_KERNEL_MEMORY
{
  DWORD64 Base;
  DWORD32 Size;
} READ_KERNEL_MEMORY, * PREAD_KERNEL_MEMORY;

typedef struct _WRITE_PROCESS_MEMORY
{
  DWORD32 Pid;
  DWORD64 Base;
  DWORD32 Size;
  PVOID Buffer;
} WRITE_PROCESS_MEMORY, * PWRITE_PROCESS_MEMORY;
typedef struct _WRITE_KERNEL_MEMORY
{
  DWORD64 Base;
  DWORD32 Size;
  PVOID Buffer;
} WRITE_KERNEL_MEMORY, * PWRITE_KERNEL_MEMORY;

typedef struct _SCAN_PROCESS_FIRST
{
  DWORD32 Pid;
  DWORD64 Base;
  DWORD32 Size;
  PVOID Buffer;
  DWORD32 Type;
} SCAN_PROCESS_FIRST, * PSCAN_PROCESS_FIRST;
typedef struct _SCAN_PROCESS_NEXT
{
  DWORD32 Pid;
} SCAN_PROCESS_NEXT, * PSCAN_PROCESS_NEXT;

///////////////////////////////////////////////////////////
// I/O response data types
///////////////////////////////////////////////////////////

typedef struct _PROCESS_IMAGE
{
  DWORD64 Base;
  DWORD32 Size;
  WCHAR Name[260];
} PROCESS_IMAGE, * PPROCESS_IMAGE;
typedef struct _KERNEL_IMAGE
{
  DWORD64 Base;
  DWORD32 Size;
  CHAR Name[260];
} KERNEL_IMAGE, * PKERNEL_IMAGE;

#endif