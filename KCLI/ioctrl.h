/*
* @author allogic
* @file ioctrl.h
* @brief I/O communication protocol.
* @copyright allogic 2021. All Rights Reserved.
*/

#ifndef _IOCTRL_H
#define _IOCTRL_H

#include "global.h"

/*
* Write control codes.
*/

#define KM_WRITE_MEMORY_PROCESS  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0100, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_WRITE_MEMORY_KERNEL   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0101, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

/*
* Read control codes.
*/

#define KM_READ_MEMORY_PROCESS   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0200, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_READ_MEMORY_KERNEL    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0201, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_READ_MODULES_PROCESS  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0202, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_READ_MODULES_KERNEL   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0203, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_READ_THREADS_PROCESS  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0204, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_READ_SCAN_RESULTS     CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0205, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

/*
* Trace control codes.
*/

#define KM_TRACE_CONTEXT_START   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0300, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_TRACE_CONTEXT_STOP    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0301, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

/*
* Debug control codes.
*/

#define KM_DEBUG_BREAKPOINT_SET  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0400, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_DEBUG_BREAKPOINT_REM  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0401, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

/*
* Scan control codes.
*/

#define KM_SCAN_NEW              CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0500, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_UNDO             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0501, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_INT              CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0502, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_REAL             CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0503, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_BYTES            CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0504, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_FILTER_CHANGED   CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0505, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_FILTER_UNCHANGED CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0506, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_FILTER_INCREASED CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0507, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)
#define KM_SCAN_FILTER_DECREASED CTL_CODE(FILE_DEVICE_UNKNOWN, 0x0508, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

/*
* Write request types.
*/

typedef struct _WRITE_MEMORY_PROCESS
{
  ULONG Pid;
  WCHAR ImageName[256];
  ULONG Offset;
  ULONG Size;
  BYTE Bytes[1024];
} WRITE_MEMORY_PROCESS, * PWRITE_MEMORY_PROCESS;
typedef struct _WRITE_MEMORY_KERNEL
{
  CHAR ImageName[256];
  ULONG Offset;
  ULONG Size;
  BYTE Bytes[1024];
} WRITE_MEMORY_KERNEL, * PWRITE_MEMORY_KERNEL;

/*
* Read request types.
*/

typedef struct _READ_MEMORY_PROCESS
{
  ULONG Pid;
  WCHAR ImageName[256];
  ULONG Offset;
  ULONG Size;
} READ_MEMORY_PROCESS, * PREAD_MEMORY_PROCESS;
typedef struct _READ_MEMORY_KERNEL
{
  CHAR ImageName[256];
  ULONG Offset;
  ULONG Size;
} READ_MEMORY_KERNEL, * PREAD_MEMORY_KERNEL;
typedef struct _READ_MODULES_PROCESS
{
  ULONG Pid;
  ULONG Size;
} READ_MODULES_PROCESS, * PREAD_MODULES_PROCESS;
typedef struct _READ_MODULES_KERNEL
{
  ULONG Size;
} READ_MODULES_KERNEL, * PREAD_MODULES_KERNEL;
typedef struct _READ_THREADS_PROCESS
{
  ULONG Pid;
  ULONG Size;
} READ_THREADS_PROCESS, * PREAD_THREADS_PROCESS;
typedef struct _READ_SCAN_RESULTS
{
  PVOID Tmp;
} READ_SCAN_RESULTS, * PREAD_SCAN_RESULTS;

/*
* Trace request types.
*/

typedef struct _TRACE_CONTEXT_START
{
  ULONG Pid;
  ULONG64 Address;
} TRACE_CONTEXT_START, * PTRACE_CONTEXT_START;
typedef struct _TRACE_CONTEXT_STOP
{
  ULONG Id;
} TRACE_CONTEXT_STOP, * PTRACE_CONTEXT_STOP;

/*
* Debug request types.
*/

typedef struct _DEBUG_BREAKPOINT_SET
{
  ULONG64 Base;
  enum TYPE
  {
    Software,
    Hardware,
  } Type;
} DEBUG_BREAKPOINT_SET, * PDEBUG_BREAKPOINT_SET;
typedef struct _DEBUG_BREAKPOINT_REM
{
  ULONG64 Base;
} DEBUG_BREAKPOINT_REM, * PDEBUG_BREAKPOINT_REM;

/*
* Scan request types.
*/

typedef enum _SIGNEDNESS
{
  Signed,
  Unsigned,
} SIGNEDNESS;
typedef enum _WIDTH
{
  x8,
  x16,
  x32,
  x64,
} WIDTH;
typedef enum _ENDINESS
{
  Little,
  Big,
} ENDINESS;

typedef struct _SCAN_NEW
{
  PVOID Tmp;
} SCAN_NEW, * PSCAN_NEW;
typedef struct _SCAN_UNDO
{
  PVOID Tmp;
} SCAN_UNDO, * PSCAN_UNDO;
typedef struct _SCAN_INT
{
  union
  {
    BYTE V8;
    BYTE V16[2];
    BYTE V32[4];
  } Value;
  WIDTH Width;
  SIGNEDNESS Signedness;
  ENDINESS Endiness;
} SCAN_INT, * PSCAN_INT;
typedef struct _SCAN_REAL
{
  union
  {
    BYTE V32[4];
    BYTE V64[8];
  } Value;
  WIDTH Width;
  ENDINESS Endiness;
} SCAN_REAL, * PSCAN_REAL;
typedef struct _SCAN_BYTES
{
  BYTE Bytes[256];
  ULONG Size;
} SCAN_BYTES, * PSCAN_BYTES;
typedef struct _SCAN_FILTER_CHANGED
{
  PVOID Tmp;
} SCAN_FILTER_CHANGED, * PSCAN_FILTER_CHANGED;
typedef struct _SCAN_FILTER_UNCHANGED
{
  PVOID Tmp;
} SCAN_FILTER_UNCHANGED, * PSCAN_FILTER_UNCHANGED;
typedef struct _SCAN_FILTER_INCREASED
{
  PVOID Tmp;
} SCAN_FILTER_INCREASED, * PSCAN_FILTER_INCREASED;
typedef struct _SCAN_FILTER_DECREASED
{
  PVOID Tmp;
} SCAN_FILTER_DECREASED, * PSCAN_FILTER_DECREASED;

#endif